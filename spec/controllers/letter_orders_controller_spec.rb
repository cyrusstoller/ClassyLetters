require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe LetterOrdersController do
  render_views
  
  before(:each) do
    @user = Factory(:user)
    sign_in @user
  end

  # This should return the minimal set of attributes required to create a valid
  # LetterOrder. As you add validations to LetterOrder, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    { 
      :preferred_delivery_date => Time.now.to_date + 3.days, 
      :message => "Sample Message", 
      :address_street1 =>  "776 University",
      :address_street2 =>  "",
      :address_city    =>  "Palo Alto",
      :address_state   =>  "CA",
      :address_zip     =>  "94116"
    }
  end

  describe "GET index" do
    it "assigns all letter_orders as @letter_orders" do
      letter_order = Factory(:letter_order, :user_id => @user.id, :delivery_status => 0)
      get :index, {}
      assigns(:letter_order_drafts).should eq([letter_order])
      assigns(:letter_orders_purchased).should eq([])
      assigns(:letter_orders_delivered).should eq([])
    end
  end

  describe "GET show" do
    it "assigns the requested letter_order as @letter_order" do
      letter_order = Factory(:letter_order, :user_id => @user.id)
      get :show, {:id => letter_order.to_param}
      assigns(:letter_order).should eq(letter_order)
    end
  end

  describe "GET new" do
    it "assigns a new letter_order as @letter_order" do
      get :new, {}
      assigns(:letter_order).should be_a_new(LetterOrder)
    end
  end

  describe "GET edit" do
    it "assigns the requested letter_order as @letter_order" do
      letter_order = Factory(:letter_order, :user_id => @user.id)
      get :edit, {:id => letter_order.to_param}
      assigns(:letter_order).should eq(letter_order)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new LetterOrder" do
        expect {
          post :create, { :letter_order => valid_attributes }
        }.to change(LetterOrder, :count).by(1)
      end

      it "assigns a newly created letter_order as @letter_order" do
        post :create, {:letter_order => valid_attributes}
        assigns(:letter_order).should be_a(LetterOrder)
        assigns(:letter_order).should be_persisted
      end

      it "redirects to the created letter_order" do
        post :create, {:letter_order => valid_attributes}
        response.should redirect_to(LetterOrder.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved letter_order as @letter_order" do
        # Trigger the behavior that occurs when invalid params are submitted
        LetterOrder.any_instance.stub(:save).and_return(false)
        post :create, {:letter_order => {}}
        assigns(:letter_order).should be_a_new(LetterOrder)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        LetterOrder.any_instance.stub(:save).and_return(false)
        post :create, {:letter_order => {}}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested letter_order" do
        letter_order = Factory(:letter_order, :user_id => @user.id)
        # Assuming there are no other letter_orders in the database, this
        # specifies that the LetterOrder created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        LetterOrder.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => letter_order.to_param, :letter_order => {'these' => 'params'}}
      end

      it "assigns the requested letter_order as @letter_order" do
        letter_order = Factory(:letter_order, :user_id => @user.id)
        put :update, {:id => letter_order.to_param, :letter_order => valid_attributes}
        assigns(:letter_order).should eq(letter_order)
      end

      it "redirects to the letter_order" do
        letter_order = Factory(:letter_order, :user_id => @user.id)
        put :update, { :id => letter_order.to_param, :letter_order => valid_attributes }
        response.should redirect_to(letter_order)
      end
    end

    describe "with invalid params" do
      it "assigns the letter_order as @letter_order" do
        letter_order = Factory(:letter_order, :user_id => @user.id)
        # Trigger the behavior that occurs when invalid params are submitted
        LetterOrder.any_instance.stub(:save).and_return(false)
        put :update, {:id => letter_order.to_param, :letter_order => {}}
        assigns(:letter_order).should eq(letter_order)
      end

      it "re-renders the 'edit' template" do
        letter_order = Factory(:letter_order, :user_id => @user.id)
        # Trigger the behavior that occurs when invalid params are submitted
        LetterOrder.any_instance.stub(:save).and_return(false)
        put :update, {:id => letter_order.to_param, :letter_order => {}}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested letter_order" do
      letter_order = Factory(:letter_order, :user_id => @user.id)
      expect {
        delete :destroy, {:id => letter_order.to_param}
      }.to change(LetterOrder, :count).by(-1)
    end

    it "redirects to the letter_orders list" do
      letter_order = Factory(:letter_order, :user_id => @user.id)
      delete :destroy, {:id => letter_order.to_param}
      response.should redirect_to(letter_orders_url)
    end
  end

end
