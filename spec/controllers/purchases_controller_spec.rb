require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe PurchasesController do
  render_views
  
  before(:each) do
    @user = Factory(:user)
    sign_in @user
    @lettre_order = Factory(:lettre_order, :user_id => @user.id)
  end
  
  # This should return the minimal set of attributes required to create a valid
  # Purchase. As you add validations to Purchase, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    { :stripe_card_token => "sample_token" }
  end
  
  def stripe_api_response
    {
      "created"=>1335248008, 
      "amount"=>0, 
      "disputed"=>false, 
      "card"=>{
        "address_country"=>nil, 
        "type"=>"Visa", 
        "address_zip_check"=>nil, 
        "fingerprint"=>"HzrHzq0Utd9W0pLp", 
        "address_state"=>nil, 
        "exp_month"=>12, 
        "address_line1_check"=>nil, 
        "country"=>"US", 
        "last4"=>"4242", 
        "exp_year"=>2013, 
        "address_zip"=>nil, 
        "object"=>"card", 
        "address_line1"=>nil, 
        "name"=>nil, 
        "address_line2"=>nil, 
        "id"=>"cc_y56GQT4SSdG0u5", 
        "cvc_check"=>nil
      }, 
      "invoice"=>nil, 
      "refunded"=>false, 
      "amount_refunded"=>0, 
      "currency"=>"usd", 
      "fee"=>0, 
      "failure_message"=>nil, 
      "object"=>"charge", 
      "livemode"=>false, 
      "description"=>nil, 
      "id"=>"ch_SrsONthza4OPl9", 
      "paid"=>true, 
      "customer"=>nil
    }
  end

  describe "GET show" do
    it "assigns the requested purchase as @purchase" do
      purchase = Factory(:purchase, :lettre_order_id => @lettre_order.id)
      get :show, { :lettre_order_id => purchase.lettre_order.to_param }
      assigns(:purchase).should eq(purchase)
    end
    
    it "should redirect to the new action if there is no purchase" do
      get :show, { :lettre_order_id => @lettre_order.to_param }
      response.should redirect_to( :action => :new )
    end
  end

  describe "GET new" do
    it "assigns a new purchase as @purchase" do
      get :new, { :lettre_order_id => @lettre_order.to_param }
      assigns(:purchase).should be_a_new(Purchase)
    end
    
    it "should redirect to the show page if the lettre order has already been purchased" do
      purchase = Factory(:purchase, :lettre_order_id => @lettre_order.id)
      get :new, { :lettre_order_id => @lettre_order.to_param }
      response.should redirect_to( :action => :show )
    end
  end

  describe "POST create" do
    describe "purchase already exists" do
      it "should redirect to the show page if the lettre order has already been purchased" do
        purchase = Factory(:purchase, :lettre_order_id => @lettre_order.id)
        post :create, {:lettre_order_id => @lettre_order.to_param, :purchase => valid_attributes}
        response.should redirect_to( :action => :show )
      end
    end
    
    describe "with valid params" do
      before(:each) do
        Stripe::Charge.stub(:create).and_return(stripe_api_response)
      end
      it "creates a new Purchase" do
        expect {
          post :create, {:lettre_order_id => @lettre_order.to_param, :purchase => valid_attributes}
        }.to change(Purchase, :count).by(1)
      end

      it "assigns a newly created purchase as @purchase" do
        post :create, {:lettre_order_id => @lettre_order.to_param, :purchase => valid_attributes}
        assigns(:purchase).should be_a(Purchase)
        assigns(:purchase).should be_persisted
      end

      it "redirects to the created purchase" do
        post :create, {:lettre_order_id => @lettre_order.to_param, :purchase => valid_attributes}
        response.should redirect_to( lettre_order_purchase_path(@lettre_order.to_param) )
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved purchase as @purchase" do
        # Trigger the behavior that occurs when invalid params are submitted
        Purchase.any_instance.stub(:save_with_payment).and_return(false)
        post :create, { :lettre_order_id => @lettre_order.to_param, :purchase => {} }
        assigns(:purchase).should be_a_new(Purchase)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Purchase.any_instance.stub(:save_with_payment).and_return(false)
        post :create, { :lettre_order_id => @lettre_order.to_param, :purchase => {} }
        response.should render_template("new")
      end
    end
  end

end
